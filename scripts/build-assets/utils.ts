import { access, constants, mkdir, readdir } from 'node:fs/promises'
import { resolve, dirname } from 'node:path'
import { fileURLToPath } from 'node:url'
import { logger } from './logger'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const ROOT_FOLDER = resolve(__dirname, '../..')

export const POSTS_FOLDER = resolve(ROOT_FOLDER, 'posts')
export const ASSETS_FOLDER = resolve(ROOT_FOLDER, 'build-assets')
export const POSTS_ASSETS_FOLDER = resolve(ASSETS_FOLDER, 'posts')
export const AUTHORS_ASSETS_FOLDER = resolve(ASSETS_FOLDER, 'authors')

export const makeDirectoryIfNotExists = async (path: string) => {
  try {
    await access(path, constants.F_OK | constants.W_OK | constants.R_OK)
  } catch {
    logger.debug(`Creating directory: ${path}`)
    await mkdir(path)
  }
}

export const getPostDirectories = async () => {
  const files = await readdir(POSTS_FOLDER)
  logger.debug('Found posts:', files)
  return files.filter((file) => file !== '.DS_Store')
}

export const writeOutput = async (items: string[]): Promise<string> => {
  const disclaimer = `/* eslint-disable @stylistic/quote-props */
/*
 This file is auto generated by the asset manager
 Do not edit this file directly
 */

// =============================================================
// Types
// =============================================================

type StaticImageData = {
  src: string
  height: number
  width: number
  blurDataURL?: string
  blurWidth?: number
  blurHeight?: number
}

// =============================================================
// Assets
// =============================================================

`

  return disclaimer + items.join('\n\n') + '\n'
}
